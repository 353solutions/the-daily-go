




















nlp on  gcil2021 [?] via go v1.15.8 
$ls
LICENSE.txt  nlp.go  README.md

nlp on  gcil2021 [?] via go v1.15.8 
$ go mod init github.com/353solutions/nlp
go: creating new go.mod: module github.com/353solutions/nlp

nlp on  gcil2021 [?] via go v1.15.8 
$ tree
.
├── go.mod
├── LICENSE.txt
├── nlp.go
└── README.md

0 directories, 4 files

nlp on  gcil2021 [?] via go v1.15.8 
$ go doc .
package nlp // import "github.com/353solutions/nlp"

func Tokenize(text string) []string
nlp on  gcil2021 [?] via go v1.15.8 
❮ go doc .
package nlp // import "github.com/353solutions/nlp"

func Tokenize(text string) []string

nlp on  gcil2021 [?] via go v1.15.8 
$ go doc Tokenize
package nlp // import "."

func Tokenize(text string) []string
    Tokenize returns list of tokens in text


nlp on  gcil2021 [?] via go v1.15.8 
$ go doc .       
package nlp // import "github.com/353solutions/nlp"


    Package nlp provides simple natural language processing utilities for Go
...

func Tokenize(text string) []string
nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v
go: finding module for package github.com/353solutions.com/nlp
# github.com/353solutions/nlp
example_test.go:6:2: cannot find module providing package github.com/353solutions.com/nlp: module github.com/353solutions.com/nlp: git ls-remote -q origin in /home/miki/go/pkg/mod/cache/vcs/af32e3b6ffbeaa2b6806a56d1df8044887cac3d45ad58127676f026177b0dbcd: exit status 128:
	fatal: could not read Username for 'https://github.com': terminal prompts disabled
Confirm the import path was entered correctly.
If this is a private repository, see https://golang.org/doc/faq#git_https for additional information.
FAIL	github.com/353solutions/nlp [setup failed]

nlp on  gcil2021 [?] via go v1.15.8 
$ cat go.mod                                                                                                1 ↵
module github.com/353solutions/nlp

go 1.15

nlp on  gcil2021 [?] via go v1.15.8 
$ ls
doc.go  example_test.go  go.mod  LICENSE.txt  nlp.go  README.md
nlp on  gcil2021 [?] via go v1.15.8 
$ cat example_test.go 
package nlp

import (
	"fmt"

	"github.com/353solutions.com/nlp"
)

func ExampleTokenize() {
	text := "Hi, how are you feeling today?"
	tokens := nlp.Tokenize(text)
	fmt.Println(tokens)

	// Output:
	// [hi how are you feeling today]
}

nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v         # github.com/353solutions/nlp
package github.com/353solutions/nlp (test)
	imports github.com/353solutions/nlp: import cycle not allowed in test
FAIL	github.com/353solutions/nlp [setup failed]

nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v                                                                                                1 ↵
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
ok  	github.com/353solutions/nlp	0.002s

nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v
=== RUN   ExampleTokenize
--- FAIL: ExampleTokenize (0.00s)
got:
[hi how are you feeling today]
want:
[hi how you feeling today]
FAIL
exit status 1
FAIL	github.com/353solutions/nlp	0.002s
nlp on  gcil2021 [?] via go v1.15.8 
$ curl -LO gopkg.in/yaml.v2                                                                                 1 ↵
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   282  100   282    0     0    909      0 --:--:-- --:--:-- --:--:--   912
100  3684    0  3684    0     0    921      0 --:--:--  0:00:03 --:--:--  1518

nlp on  gcil2021 [?] via go v1.15.8 took 4s 
❮ curl -L gopkg.in/yaml.v2 
^C

nlp on  gcil2021 [?] via go v1.15.8 took 3s 
❮ curl -i gopkg.in/yaml.v2                                                                                130 ↵
HTTP/1.1 302 Found
Date: Thu, 11 Feb 2021 08:17:01 GMT
Server: Apache/2.4.29 (Ubuntu)
Location: https://gopkg.in/yaml.v2
Content-Length: 282
Content-Type: text/html; charset=iso-8859-1

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>302 Found</title>
</head><body>
<h1>Found</h1>
<p>The document has moved <a href="https://gopkg.in/yaml.v2">here</a>.</p>
<hr>
<address>Apache/2.4.29 (Ubuntu) Server at gopkg.in Port 80</address>
</body></html>
nlp on  gcil2021 [?] via go v1.15.8 
$ curl -i https://gopkg.in/yaml.v2
HTTP/1.1 200 OK
Date: Thu, 11 Feb 2021 08:17:15 GMT
Server: Apache/2.4.29 (Ubuntu)
Content-Type: text/html
Vary: Accept-Encoding
Transfer-Encoding: chunked

<!DOCTYPE html>
<html >
	<head>
		<meta charset="utf-8">
		<title>yaml.v2 - gopkg.in/yaml.v2</title>
		<link href='//fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' >
		<link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet" >
		<link href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet" >
		<style>
			html,
			body {
				height: 100%;
			}

			@media (min-width: 1200px) {
				.container {
					width: 970px;
				}
			}

			body {
				font-family: 'Ubuntu', sans-serif;
			}

			pre {
				font-family: 'Ubuntu Mono', sans-serif;
			}

			.main {
				padding-top: 20px;
			}

			.buttons a {
				width: 100%;
				text-align: left;
				margin-bottom: 5px;
			}

			.getting-started div {
				padding-top: 12px;
			}

			.getting-started p, .synopsis p {
				font-size: 1.3em;
			}

			.getting-started pre {
				font-size: 15px;
			}

			.versions {
				font-size: 1.3em;
			}
			.versions div {
				padding-top: 5px;
			}
			.versions a {
				font-weight: bold;
			}
			.versions a.current {
				color: black;
				font-decoration: none;
			}

			 
			#wrap {
				min-height: 100%;
				height: auto !important;
				height: 100%;
				 
				margin: 0 auto -40px;
			}

			 
			#footer {
				height: 40px;
				background-color: #eee;
				padding-top: 8px;
				text-align: center;
			}

			 
			@media (max-width: 767px) {
				#footer {
					margin-left: -20px;
					margin-right: -20px;
					padding-left: 20px;
					padding-right: 20px;
				}
			}
		</style>
	</head>
	<body>
		<script type="text/javascript">
			
			if (window.location.hash.length > 1) {
				window.location = "https://godoc.org/gopkg.in\/yaml.v2" + window.location.hash;
			}
		</script>
		<div id="wrap" >
			<div class="container" >
				<div class="row" >
					<div class="col-sm-12" >
						<div class="page-header">
							<h1>gopkg.in/yaml.v2</h1>
							
						</div>
					</div>
				</div>
				
				<div class="row" >
					<div class="col-sm-12" >
						<a class="btn btn-lg btn-info" href="https://github.com/go-yaml/yaml/tree/v2.4.0" ><i class="fa fa-github"></i> Source Code</a>
						<a class="btn btn-lg btn-info" href="https://godoc.org/gopkg.in/yaml.v2" ><i class="fa fa-info-circle"></i> API Documentation</a>
					</div>
				</div>
				<div class="row main" >
					<div class="col-sm-8 info" >
						<div class="getting-started" >
							<h2>Getting started</h2>
							<div>
								<p>To get the package, execute:</p>
								<pre>go get gopkg.in/yaml.v2</pre>
							</div>
							<div>
								<p>To import this package, add the following line to your code:</p>
								<pre>import "gopkg.in/yaml.v2"</pre>
								
							</div>
							<div>
								<p>For more details, see the API documentation.</p>
							</div>
						</div>
					</div>
					<div class="col-sm-3 col-sm-offset-1 versions" >
						<h2>Versions</h2>
						
							
								<div>
									<a href="//gopkg.in/yaml.v3" >v3</a>
									&rarr;
									<span class="label label-default">v3</span>
								</div>
							
								<div>
									<a href="//gopkg.in/yaml.v2" class="current">v2</a>
									&rarr;
									<span class="label label-default">v2.4.0</span>
								</div>
							
								<div>
									<a href="//gopkg.in/yaml.v1" >v1</a>
									&rarr;
									<span class="label label-default">v1</span>
								</div>
							
						
					</div>
				</div>
			</div>
		</div>

		<div id="footer">
			<div class="container">
				<div class="row">
					<div class="col-sm-12">
						<p class="text-muted credit"><a href="https://gopkg.in">gopkg.in<a></p>
					</div>
				</div>
			</div>
		</div>

		
		
	</body>
</html>%                                                                                                       
nlp on  gcil2021 [?] via go v1.15.8 took 3s 
$ ls
doc.go  example_test.go  go.mod  LICENSE.txt  nlp.go  README.md  yaml.v2

nlp on  gcil2021 [?] via go v1.15.8 
$ rm yaml.v2 

nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v
go: finding module for package github.com/353solutions/nlp
# github.com/353solutions/nlp2
example_test.go:6:2: module github.com/353solutions/nlp@latest found (v0.0.0-20190512081133-8439268a6919), but does not contain package github.com/353solutions/nlp
FAIL	github.com/353solutions/nlp2 [setup failed]

nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v                                                                                                1 ↵
# github.com/353solutions/nlp2_test [github.com/353solutions/nlp2.test]
./example_test.go:6:2: imported and not used: "github.com/353solutions/nlp2" as nlp
./example_test.go:11:12: undefined: nlp2
FAIL	github.com/353solutions/nlp2 [build failed]
nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v                                                                                                2 ↵
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
ok  	github.com/353solutions/nlp2	0.003s

nlp on  gcil2021 [?] via go v1.15.8 
$ tree
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── nlp.go
└── README.md

0 directories, 7 files

nlp on  gcil2021 [?] via go v1.15.8 
$go build

nlp on  gcil2021 [?] via go v1.15.8 
❮ go build

nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v
go: finding module for package github.com/stretchr/testify/require
go: found github.com/stretchr/testify/require in github.com/stretchr/testify v1.7.0
=== RUN   TestTokenize
=== RUN   TestTokenize/<empty>
    nlp_test.go:29: 
        	Error Trace:	nlp_test.go:29
        	Error:      	Not equal: 
        	            	expected: []string{}
        	            	actual  : []string(nil)
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,3 +1,2 @@
        	            	-([]string) {
        	            	-}
        	            	+([]string) <nil>
        	            	 
        	Test:       	TestTokenize/<empty>
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/Who's_on_first?
--- FAIL: TestTokenize (0.00s)
    --- FAIL: TestTokenize/<empty> (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/Who's_on_first? (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
FAIL
exit status 1
FAIL	github.com/353solutions/nlp	0.004s
nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v                                                                                                1 ↵
=== RUN   TestTokenize
=== RUN   TestTokenize/<empty>
    nlp_test.go:29: 
        	Error Trace:	nlp_test.go:29
        	Error:      	Not equal: 
        	            	expected: []string{}
        	            	actual  : []string(nil)
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,3 +1,2 @@
        	            	-([]string) {
        	            	-}
        	            	+([]string) <nil>
        	            	 
        	Test:       	TestTokenize/<empty>
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/Who's_on_first?
--- FAIL: TestTokenize (0.00s)
    --- FAIL: TestTokenize/<empty> (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/Who's_on_first? (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
FAIL
exit status 1
FAIL	github.com/353solutions/nlp	0.005s
nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v                                                                                                1 ↵
=== RUN   TestTokenize
=== RUN   TestTokenize/<empty>
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/Who's_on_first?
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/Who's_on_first? (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
ok  	github.com/353solutions/nlp	0.010s

nlp on  gcil2021 [?] via go v1.15.8 
$ go test -v
# github.com/353solutions/nlp [github.com/353solutions/nlp.test]
./nlp_test.go:15:10: missing type in composite literal
FAIL	github.com/353solutions/nlp [build failed]
nlp on  gcil2021 [?] via go v1.15.8 
❮ go test -v                                                                                                2 ↵
Before main
=== RUN   TestTokenize
=== RUN   TestTokenize/<empty>
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/Who's_on_first?
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/Who's_on_first? (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.004s

nlp on  gcil2021 [?] via go v1.15.8 
$ cp ../data/tokenizer_cases.json .
nlp on  gcil2021 [?] via go v1.15.8 
$ tree
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── nlp.go
├── nlp_test.go
├── README.md
└── tokenizer_cases.json

0 directories, 9 files

nlp on  gcil2021 [?] via go v1.15.8 
$ git add .

nlp on  gcil2021 [+] via go v1.15.8 
$ git ci -m 'start of testing'
[gcil2021 6bc1e4e] start of testing
 7 files changed, 110 insertions(+)
 create mode 100644 doc.go
 create mode 100644 example_test.go
 create mode 100644 go.mod
 create mode 100644 go.sum
 create mode 100644 nlp.go
 create mode 100644 nlp_test.go
 create mode 100644 tokenizer_cases.json
nlp on  gcil2021 [⇡] via go v1.15.8 
$ git push
Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 4 threads
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 2.27 KiB | 2.27 MiB/s, done.
Total 9 (delta 0), reused 1 (delta 0), pack-reused 0
To github.com:353solutions/nlp.git
   8439268..6bc1e4e  gcil2021 -> gcil2021

nlp on  gcil2021 via go v1.15.8 took 3s 
$ tree
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── nlp.go
├── nlp_test.go
├── README.md
└── tokenizer_cases.json

0 directories, 9 files
nlp on  gcil2021 [!] via go v1.15.8 
$ mkdir data 

nlp on  gcil2021 [!] via go v1.15.8 
$ go test -v
# github.com/353solutions/nlp [github.com/353solutions/nlp.test]
./nlp_test.go:4:2: imported and not used: "encoding/json"
FAIL	github.com/353solutions/nlp [build failed]

nlp on  gcil2021 [!] via go v1.15.8 
$ go test -v                                                                                                2 ↵
# github.com/353solutions/nlp [github.com/353solutions/nlp.test]
./nlp_test.go:18:1: missing return at end of function
FAIL	github.com/353solutions/nlp [build failed]

nlp on  gcil2021 [!] via go v1.15.8 
$ go test -v                                                                                                2 ↵
Before main
=== RUN   TestTokenize
=== RUN   TestTokenize/<empty>
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/Who's_on_first?
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/Who's_on_first? (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.005s
nlp on  gcil2021 [!] via go v1.15.8 
$ go build ./...

nlp on  gcil2021 [!] via go v1.15.8 
$ ls
data    example_test.go  go.sum       nlp.go       README.md
doc.go  go.mod           LICENSE.txt  nlp_test.go  tokenizer_cases.json

nlp on  gcil2021 [!] via go v1.15.8 
$ mv data testdata

nlp on  gcil2021 [!] via go v1.15.8 
$ mv tokenizer_cases.json testdata 

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ tree
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── nlp.go
├── nlp_test.go
├── README.md
└── testdata
    └── tokenizer_cases.json

1 directory, 9 files
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ tree
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── nlp.go
├── nlp_test.go
├── README.md
└── testdata
    └── tokenizer_cases.json

1 directory, 9 files

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test -v                      
# github.com/353solutions/nlp [github.com/353solutions/nlp.test]
./nlp_test.go:46:38: not enough arguments in call to loadTokenizeCases
	have (*testing.T)
	want (*testing.T, string)
FAIL	github.com/353solutions/nlp [build failed]
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test -v                                                                                                2 ↵
Before main
=== RUN   TestTokenize
=== RUN   TestTokenize/<empty>
=== RUN   TestTokenize/<empty>#01
=== RUN   TestTokenize/<empty>#02
=== RUN   TestTokenize/<empty>#03
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
    --- PASS: TestTokenize/<empty>#01 (0.00s)
    --- PASS: TestTokenize/<empty>#02 (0.00s)
    --- PASS: TestTokenize/<empty>#03 (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.003s

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test -vBefore main
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
    nlp_test.go:55: 
        	Error Trace:	nlp_test.go:55
        	Error:      	Not equal: 
        	            	expected: []string(nil)
        	            	actual  : []string{"hi"}
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,2 +1,4 @@
        	            	-([]string) <nil>
        	            	+([]string) (len=1) {
        	            	+ (string) (len=2) "hi"
        	            	+}
        	            	 
        	Test:       	TestTokenize/hi
=== RUN   TestTokenize/HI
    nlp_test.go:55: 
        	Error Trace:	nlp_test.go:55
        	Error:      	Not equal: 
        	            	expected: []string(nil)
        	            	actual  : []string{"hi"}
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,2 +1,4 @@
        	            	-([]string) <nil>
        	            	+([]string) (len=1) {
        	            	+ (string) (len=2) "hi"
        	            	+}
        	            	 
        	Test:       	TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
    nlp_test.go:55: 
        	Error Trace:	nlp_test.go:55
        	Error:      	Not equal: 
        	            	expected: []string(nil)
        	            	actual  : []string{"what", "s", "on", "second"}
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,2 +1,7 @@
        	            	-([]string) <nil>
        	            	+([]string) (len=4) {
        	            	+ (string) (len=4) "what",
        	            	+ (string) (len=1) "s",
        	            	+ (string) (len=2) "on",
        	            	+ (string) (len=6) "second"
        	            	+}
        	            	 
        	Test:       	TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- FAIL: TestTokenize (0.00s)
    --- FAIL: TestTokenize/hi (0.00s)
    --- FAIL: TestTokenize/HI (0.00s)
    --- FAIL: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
FAIL
After main
exit status 1
FAIL	github.com/353solutions/nlp	0.006s
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test -v                                                                                                1 ↵
Before main
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.006s

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ cat ../quotes/hickey.txt 
I'm a big proponent of testing, I'm not a big proponent of test writing.
    - Rich Hickey
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test -v              
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.006s

nlp on  gcil2021 [✘!?] via go v1.15.8 
$go test -v
Before main
=== RUN   TestTokenizeFuzz
    nlp_test.go:16: 
    nlp_test.go:16: 𴂍򲾴񣁱񤛢򫖇񴣮򕃐􇥅񼡾񒸮񈢣
    nlp_test.go:16: 񇩑󚤅󸷗󷙾𩪹򐈵򃊻𶮱𾑊񂄂󎻎񨑓򀖷𡁧򜇩񔷬𜵌󦙶񈠜󬹼
    nlp_test.go:16: 󌍮󥣥󡢪⇅𝀝
    nlp_test.go:16: 󸅅򒞼򠩕󥤬񏚳򈾌娋󅐃𑗲󩝐䑉񬏑
    nlp_test.go:16: 򤚃󩼤𣵪񉗴󞇏ͩ򕒔𪯈򓫉񓓋񅮣𕦔󡯵񻻂󾭌򽽤򰘧
    nlp_test.go:16: 󇹛
    nlp_test.go:16: 􆋰򲑛򰮃􋌲𪦽򹮭򚦱򪏞񒗅򔣡񟌠󲑰𨼐󧚺񭃜򻁦񍗬񪄲쪿𣓃񎽚򈀊𮙲󘯓񞄒󓈅񦸋򯹳𕺇񘧉񚋦󾄵𮐞򺰪񽠞膳
    nlp_test.go:16: 񜵐򫷖󶛵湰G󧥮󝘓𵚨󀎼􀻶𝧯𷁫􋭇񈻛󢭩򿱑񿖊򣏦񸯠󢢝򞯫􋔬򄼂󷐽䰜􃐃󥷊󥪢񸨠𝈶񛽨󞭃𰰢𔭼󋊨
    nlp_test.go:16: 񆋞󆄄򭑚󐭯񷴅򔪟𺿆񃒢𛬸𔴘򷽥󻋛񆥭񿴪򂻣󾱃畓򮰜󌿾󺬰򾓺
    nlp_test.go:16: 𢳐깅񞼶񙪗󡕚
    nlp_test.go:16: 񀍫񃡑󤡓󬭽󬆱𻊊򙕇𨦠󈛧񨦺򹌄񶜨򳍀𬹌𦏈񂅢갛􌑍󮋧𲬵𖸒񮏴𵂽󔖴򐒦𭵶򌺹񶰺
    nlp_test.go:16: 􄵶󶈷ⱶ󋐪񠱞򶼪񦊻񯯾񻧖񔡽񓝐𱟾󮓌�󳞊򵈆򐧄􇤩𖪵󋖆򸚌􄉝񼝌󯔑􌄼𓋖㎕򣖣򹽲󈰡󨫸
    nlp_test.go:16: 󿝈󅱌񠑣򆂢򿔅󹛰񻝙㔦󣑀𶩒𵜥񸞒򄄛򸓞򾏇򑂛ꃦ󄔈񣟪򄏢򮏨𦾴𸴩񁿆񄁐󜖶񖜜󟓐
    nlp_test.go:16: 󒛼򸏼𦊬񨭓𰴆㵗󳜇𺂜󂔝󃸏򷎏􊡪򈣡𔧼򞉄𮭾􈂃𴠨򒴂򫺡􀦝
    nlp_test.go:16: 񕝽񅥖񁶀謃􊓔󺯔򦲃򏔉񼹠񵟣񫐞񣠅󄶈󇵁񧀣🮥󸪒󡯔𝨌
    nlp_test.go:16: 𝄳馞𗖛󒄨򗫄񴲯򸬌𘜕򘘲𩸖󭪎𫹥󔼼􌠞󫑍򱬂𨽣񿯂𣤶荽򁳅󒆖򡾍򱓿򸃨򋲤򆅏
    nlp_test.go:16: 򸛖󐞔񹚤𗘛򓀊𿖸򑾲􈕬᷎񐆦
    nlp_test.go:16: 򣝯💾󨑰𳢐󔜀󩌉񅊳󑄸񈎗񐘏𿟹󩈰
    nlp_test.go:16: 񮊥󬎡񃰹򿄅񰓤󴂚񘮡𙢼僤򭅍𳃥󖾢񎮗򦚝𕀥񢼔򕎈󀑭𧩡𔋵𤂧􃪹􃝺󎢌񪴳󖿨񫅩􂜱򹜀󿯖󈑹󌝱
    nlp_test.go:16: 񵝷򼂘󆂛򠢈󈊰񄑑򂆲𻿳򪌪󜕚񏈌󅼢
    nlp_test.go:16: 𽬏𖝯𛔵楫񀚀󰸪򬰐𡾄􋖜󉐈񧜝󉯈𖀯𾢅񔵅񎼛񄇒򶤩𢠐󆤇𵿱𜽁󬟭򩿅𡆁𔐌򌐙󩥎􌞛Ƚ񪒂읢󐰤򽐘􍩛𨣪񣝌󜼒񍮿񕌖򤿻򞑻򵐿􁎵
    nlp_test.go:16: 򜏯𮵄󊑞򜱒󅿩􀢪򍴱򩺍񤳐򛑇򶕂򂠭񴨉񦪥
    nlp_test.go:16: 
    nlp_test.go:16: 󇪼򫓥🣰񵦔󪽘񕤷򥮧𔞪񹽷舣񀈎􎄨󽨒򤛲񋭡쩑󈷈􎕪򠱛񘞙𯌼𵙸󉷫󞏚􉤟󹒱񓣯􃶥􊌨񟄧𷬅󏗅񥌣
    nlp_test.go:16: 𩔱򒴤򷔦𢾂뫧𜇼󵃤𥪢󻡢򼼑󤤙񰶆􇺾򗓛󁻦򀐗𙞺
    nlp_test.go:16: 򶨲񃫥遳󽳲򧋘�󫩫𧨬𕂵򚿮򳩝򢵪􀏩󍅍𨟥򧵁􂏃򋙋󪏂򡅰񳼿񻇙󚋴򇒀𰡟񪫡𛩯ᷮ񈈯󇺚򂎄𔷖
    nlp_test.go:16: 򇋉𫃤𹱗𸏯𹄌򚏎󰉕᝚
    nlp_test.go:16: 𺞶󚼁򿘝𨦬򗃼򊯴򬼦򞪕󋦕򔳏򿴂󐷔񖡏񁝞򅢔󂨝􇀱򌜎𻺵񞹺񧞧򪾕𶟜򯷆򩏏𪔲􆻽㢊犔󛿶􊤛򙘖󀒠򼏽
    nlp_test.go:16: 󌝌󳯃󐤥𘘛򂬬򏨡𷷷𩩕
    nlp_test.go:16: 띉𤹸򔒥􋞂򗥔򶝶􎠰󊰓񊙱񄩜򝅭󭣭芖󏫰󜯁񔤶񜗆񻹤񾷼􉴒򎵗󶕮
    nlp_test.go:16: 􊊗򃈮󃂑񸥦𚊰񷆛󌯚󮏓򔞉񮨚󦦏𞮌񐄃񳲊𶳞򨛒𥋴𸡁󤨻
    nlp_test.go:16: 򬳥󙛸򴼒󝈊񷐽򪓗񹂓񫙭󄤆𖒜񲕭𽘟󈟢񑰇񍽍􉉁􏕣􋰾򶈝霠𯮌󰕷󹽘󊇊􉚄򆣠󞦅󃻱񟟣󇋳򖃠𱌩󺈭󻁕󆡧󳷂
    nlp_test.go:16: 򗾢󉐆񢍑񬽣򫥢􏶫򜔈𝭽𲱢󅕋񝅗𾤒񤙤
    nlp_test.go:16: 򺅸񭇋􇠄󄊀𑬚򱮑񖪃􍇊𮙜򔤦􉟸񈙑򄭹񚞭󔛁񉹂󣶃񍰆򬓾󱺈
    nlp_test.go:16: 󥁴񡬦􇢖󓑚𪢌㌺󯀵󵒳󯚮𡄘򒋧𷕯򩢫򱩯񶾨󛛀񫛁𡤜񿪦췘𓼇򼎟
    nlp_test.go:16: 𩌕򆕚𩾜󟩓󟘍󍵹􆌓𬋋𾔒󤾑򨨋򆬨񏻳󤤀򒫻󈐹񃩶𽙼񻿦򹎏񑊿񧷝􀨄􂔌𰘝񤛒혢򸩷󲊖񰅨񠔫􂡁
    nlp_test.go:16: Ⲫ󢭥󎮱􀩏񁓜᱕𦫮񆑙񼬳򨳦󠃲󀁘𨘏򢿐󅹿𔛣󸮕󍽸򄴺񋡓񉚆𤛎񉹡񜫪
    nlp_test.go:16: 𛒖󡟔򟒝񧀤󊽡
    nlp_test.go:16: 􍟱񴢳񆩷򺢙񈂛񉩳񚙑󅕃󛳾򃾰뭙񹞴郎󖒞𚺟𧖌򥞚񲀘
    nlp_test.go:16: 񥻣󲋤𬙍𥃒񹣡󬎓𔨱񉥹񍗒򄹴󷪷ᒥ򕹲󹮶񢭴󾻸󁊱󃩍򩏴򻶦󙗮𫭟󸅂󯀽
    nlp_test.go:16: 󴎔퉂󸡂򵁻񪕝򂸩򝀪󘤚򝜪򻸫񉉛𐁇󖻓񟖬
    nlp_test.go:16: 󘴰󫰖񴭊鹰𩑹񉌢􆃻󲦢񱺔󫽳󱸤򚀘񋪀􎖉򄁤򬍐񄦼𭎰𲔑󾜒񆿗򸢇񍬅𫎒򔫦򑶑弰󤥂񶌺񩧒򠦖񣏐򤸍󤼮󦨳󷚓򯼡򁋔򖵀𤻦剆
    nlp_test.go:16: ﹅񳌻𨔪񧚞𵶳󎞢򌯺񍙹󐟎񭁮󢪉򊝵
    nlp_test.go:16: 󹛈󙨪񒢋񋿛򡿶󫈯󨈽򞂒󴈳􏞵񚝰􃄇􆀶􄝟򅚳琧񞣵񉜮򩈰񷐌񼽣􉞃򋘷󾛆񏿍䂘𵚇󚋛򵖟򉀓򝌷𮿏򟭲𩁶󐠰񏮲騗񰯴򬝜􄐋󶷰􊞮񹞘񶢛󳻊𼺵򢈦𬩿
    nlp_test.go:16: 򿉝򉮒𪣫򋈣
    nlp_test.go:16: 󇪧󫌠񠃟󃧤󄘍𡉛񜥇𘒙񎉧𷚵򇽈򾌯𔯯癨󤖺󼪝󔱌𙾡𳢁󶟟𮱋򥃑򅴽򧥠󤷢䒚񳕢񃯗󽡃󆆴򑗣𩋂񟐫媏򧮅򚃫񬊘𡾡񅞟𗵗𥔹蛕򶖤򇥃򋮻񪭑
    nlp_test.go:16: 𣺭󬯝򬳊󱽼񢍷񉐄󾐫񠦷򙛢𕾬󚔐񥛋񣩰񉯍󾲩𿚲񤤏󷌝𴩒𢜵𝖁񝾇𛄭𷉅񏐵𠜥򓝀勅
    nlp_test.go:16: 𦤍򗜝𠌁輣񇊣鷊󌔤񝹲򓡼񃮱򾕰󍃟񙏁𫉽𽣹򾂐􊧫񸍹
    nlp_test.go:16: 𐦟𶇴񰤽丳񁽾򐄑𲥽򑠕󮠪󎔒񪌡󖼋󇐕
    nlp_test.go:16: 񙰷򗃙򐨁󔤡񷴠򰖈𞰹񊇛󜑼
    nlp_test.go:16: 򿱫漘񏎖򵑌򟱬򞱳󘨈𓺚󣿶𞔕񎯇𝰟󺁕𨉅𨙭񴼖󾗨񓡖󦵓򯊱󕭾􏼸𺍵򌋗𲢴򪀩󞳍򙡝󢚮𳓮𬌨𭥨󗫉𚄂򪣥򴎇󅅗󐻡󤉉󃪤󩒶񏦖󌌷􁔕􃇐񦼎䴵򃂴󪒒
    nlp_test.go:16: 񝭽𼆉
    nlp_test.go:16: 𒚅񴍲񧓯͸𻬍󣩤𶖺󁧿򬯿󵉔
    nlp_test.go:16: 񡵘򅻴󣴗򞜭񱿨皊𚼧𠍩𴣔󏠭𶰎񩵆򟉻򁹖󴵁򳀩򴑪𰿗󗎍񻜶󰟸򧊣󒡢󩯥𤒲𒷍䒦򥟂𧮑􃛎󯸍
    nlp_test.go:16: 􌾻􀻫񸙢􀥝򥨡󌨠񔹫񒒗溧򁻟񚟟񇙰󐃛󲘄󵒬􅋑𬕗𞦂𵐽󩢶񮖦򬽏񲮏䢸🝴􉛡򹋚麷󈍬񂁭
    nlp_test.go:16: 𭂯󈍼񩻹򃤆񫦱𔝓𿘮󉄾翨񗅣󛶆񭼝񪀟𭂹󲃿򐭌񛁦􉪏󿹲󁈈󭙤呧𗾘󺉧󾺭氉
    nlp_test.go:16: ؖ膙粚񭊁𽞺򥢹𼰤򚳫򮫲𢐡𧏃󿫔󋽮񪋏󞢄≬񑿼򅒉𴜮
    nlp_test.go:16: 𮆰𐖊𫽛
    nlp_test.go:16: 򄇧񤊋񝒻񽘛񦝁𼪖󟟡󭆳򾰎𼗻𭱧󋐕񖓇쿷􌀇񻎒𤰱ﻱ񯦫񙔍񨎘򅴭⡾𯰯񹿔󟤭𖵂𮵈􇖎󒌈󅵅󃃔􂧰񁖏𙥌󴸂񪿗󄾥򼃵⟥󻒽𮉋񪶆𑥴𧾮񟁧􀤀򢨱
    nlp_test.go:16: 𯱀񦧆򒕭􋦂󹉃򗐐񋯷󱎨򌥽򫕚񃌧񲼫󤕂񀡘􄙎񲓦񌕦򴢢􈿉󥤥򙲕󵫥𝝸󉥴򜕖񅾨󪬌򅻥񜤙񡉩𭚲򌊍󟺭􃇗񵆠򜡯񱺻�񐅮𘪛􊠜񨧃󡼧􇃐󇳜􇨇༫󮕭򿘔
    nlp_test.go:16: 𿬂񲮾
    nlp_test.go:16: 𼆊𵬇򎙾𞥫𐑡󍭎򪝧􋇓𳫉񞢲򔴲񘈡󕶠򋡑񼩬󣁜󛱂󲤍񁺲񱲞񏛝󶶒򛣼񩬚򲚢𓌞񣞈𾠬񭩢򑒺𙷅񮽘䫲񸥕𦈴􆬑򎋬
    nlp_test.go:16: 󛟂񋞬𭥏򡶦𣌩𧩈􁛍򮥬򖘵񿻌󠲤򏔜ᾬ󾤃񝭆񗆚򎒐􂡋񇠘󃢶𡶻􈷩򇢈񎍼𜂼񤢡󭆴𨿂𦭟򷤬󿮸򈸲񔉃񓒴󣭓
    nlp_test.go:16: 󚏋򃄴񄴥񴰑󒸃𪈞󈰣򤕕񶧚𑛩򎀆񌒅
    nlp_test.go:16: 񢰷𒳢
    nlp_test.go:16: 􍺏򣴇𹮹𥋢ㅭ򴐗񑚂󟯗񝫶󏌩󐵙󹕕򫆠񚸡󧱴򞏬􊣶𗉣󳅇򺀧򫓙񦑭𠒂󣦨򦌊󫟫񷹂􏍄񪅮􅛏󗲹󌛛󻲋􉂮񀋴􊌅𘡹񙫖𖉊𩶬󰐍񂹍󀋌𔝎
    nlp_test.go:16: 򁚙񡘟𞥶🚕󢰘񬴣񸞢򿴻󑅾򤓙񄰤񜗭󍔈󘥨󴖁𿴌𷞨򚸘𦋭󣾏񰯷󭱵𸰳󚴅𓨦􈍢𲌲ᨣ𛿦󷸉򩿝􍈞𣃝򗈪􊃈񪀨򜲑󛚗񉲗󶘗񡗱򪧕🞰񠫄񣬏棘񒩿
    nlp_test.go:16: 󳟾𻿆돳𓲂󵑡񟪤󸰻󊄂򄍮񺄺󹙮򩱖󳝭󅩁
    nlp_test.go:16: 󫑵򙞵󾶇𴦐񲌳󻷼񫹻𔏩󄴬𢪀򠋇쇖𵩂򯫋󎴟𶽆𩸍󵪎򖜝񸡉񐵢񲀌򶬠򺟺񿀋𿹈򂩝󊲒𲏘
    nlp_test.go:16: 򻗉򿺥󉁤ꢌ򹌥󄕫󧐩򶂽򹘢󪋐􉸥񾑠󹃁񪷮𴭶񓩠􈟯񧽉𠊬򝰼􁛋󩆷
    nlp_test.go:16: 򃑉󛋢񝴩񷱲𯾖󎌒𪅆򱥤󺚋󃒙󖙧򲅘򐞳񍔁󑼙󥹯񁿞􉇢幽󾨬󗓎𼯂󰑔񘈼𛑹󼅫
    nlp_test.go:16: 
    nlp_test.go:16: 󹮝򛅱𶪂󣏯󣼂񾬮
    nlp_test.go:16: 򫭒򅦐𚌁󥨍򮸲򟴤􅔛⬈𔭼񘧜󂻜񍆘󐒏򑂒𹈘󥷛򇲁𪝥򥅍񵐰󽀀󧨪򆰤󀱩򂇙𩡧򉔸瓩󨔫󪜾󯌥󊭽𵩆򖢯󄁦񈧅𯪦
    nlp_test.go:16: 𸫠򩠼
    nlp_test.go:16: 𾃽񸿝򖮯񨴃𱊠狗󏬉񢈖񯤬􂘮򫗵󆑙𐮵󟭱𘈧󽵉񂠬򦴊򺢧煫򃁮񿂚񰝢􅚷񃫁
    nlp_test.go:16: 򭘫񉂊󄑏𩮨
    nlp_test.go:16: 򤽯񼴺򽗇񨵑󂿧񤯩򍙼󨶇󬘣񳘧򍈲󑃮󐕀򥪱󕪎󫺃򅘳𴛖򵁫󚕵񝳫򩅠񗒻𑔘򫡑򡽺􃻧齣񗴊􇱣󜤐񠓲󋻇󺸽򫧒񚸊
    nlp_test.go:16: ܺ񛈛𚙰
    nlp_test.go:16: 򘭼󌛐򓫲񿚉𴔜򥀎𶿰򵴄򲙰𨦮򚂬􏺍񹺽𯖆񒎈󤇭񓟄򨦀
    nlp_test.go:16: 򄅾󀯘𧿰񪈹򼕀򧼍򂳳򖓃󹈩𭘘𲫢􊥃񑐥兾󒎻񹦢񁍷􎗫񌬯򟊯򨿮񁩠𻻠󣦀󘗎𹯡𾈧󍷈嶌񚳔󓔩𩙧򘚩𕏵򾒣󿎦񼀟󌽱𯅆񶶤򧱍򤌉𘯣􀰣𑉦󏥭󨁗󒼇
    nlp_test.go:16: 񅃦󅸆󕓫󤼅򉘩🠊򑡮󷀒򃘍
    nlp_test.go:16: 򂬏󋤵򂯺𐅖򓯨𽛝쵎񻵓󜟿񦨲򀝺򴪉ꓤ󷦞񡫢󲌈򔍃󍄈󁤬󔩚򿦔󦍾􉛣񘿲𿲨񤠹򪧾򬶆𘟷𴣥𣛙ﵤ𖵨󙘈󚺌𗕊򧏪񢟝򎛮󎔯󴞹𜊴򈡈𖋽󹂨󂹻
    nlp_test.go:16: 𳙻󣩗񺓰񟯆𸋧񹋬𷼟򘱌򺨨򘥱󧜖񃢉򿝪㒪񯀵򦙙󣨳󊸢򪬣񉔬򧣹𲠻𬷭𔄚􉹯󤞆
    nlp_test.go:16: 񸴖󥼻
    nlp_test.go:16: 񦑰󹴪󅽻𲽤񀸀񺼢󡰃󉰅󣁋񨑇󧁊󔱍񍀫𥏃򙛿񴴳
    nlp_test.go:16: 񯩲󬿟󇝕񞫃򁈀𲾩󂔷􌬉򌷻񒲻񖼙򅀿󧎗󛜃񏣠󻐎𬨹񃙉񖊖񌍻󂩚糢񲎆򯐩񡔙򝈜򾢠󖷄񆇄ٟ󰘚񹺖𕎮�𔲬􀔦󉽠񆄴󞜄󹭒򒱳򡂋򡃟𫨾⫊
    nlp_test.go:16: 򛀕񯍔󑥯𼎥񗠾򅥴􉖑񬖂򯚕񏵌⼼𜒑򸊍񏴼󻷴󖞳񄒣󾈦󼗕󭡺󔟲򙡛򃵅񏏛󀼄󰫭򐪴韓򖱓󗉷󜪳𻒼񻻑𯞖
    nlp_test.go:16: 񡨵𪵯򣼧񢁥󧌢𞜞􅥭𾧖򧴋󾿶쯹𔀶󢚒򫿰򜁯𯌵񷂞󵦈򿛛󳡶򃚬񷴴􇿘󸓃ꭅ򍐶󼊵𛍜񎙋񴪠𼳁󙀝
    nlp_test.go:16: 󷾻󊆞𩣢󧱧󐘄򎁾򊰨󼞓􁚑򥶝𖧻󐁽𰞅񖝲󋠾𠿾󢓭򑛦𺛽򪅆򩞍򧥑񶼥𷏜
    nlp_test.go:16: 񓅃󆫉􁹮󥂺𓼎󮉋󩜵񰡘򮴖𐴣牨񿕤𣏭𶣚𸛼𨑷𨇵𦤒򡽔򼮂󱼱򆛧򺢋🗴򚜝򃇔񚳗񆦀𷒠𦬌񳃵𘔷􂐣󾖑񟞵𳍊捔𖿪񿷓󟇨󝙟󛷉򡓘󌋒
    nlp_test.go:16: 󦺐􌖘󓾂𕚁󸅙򟹊򬁡􅴮򌚦󿐺𲯈󰩁𗀘򀍝񶅼󻥈󖻓񞤃䨧𹨘󳺏󽷵鳲󰯎𰾶񨘱𫥒񻁙򭳂𤫕񂎑𡖨򟿸򦼟뵃񺿘󈏅򫪸拓
    nlp_test.go:16: 󍐊󣏘񹂕𛩖𮴮𲬭񴃂󃩗􆽲򋤠𥐵򫕨󮮞򃐞񛎇􆒳񛃪𦕲񾽯񇏅񌰹󨿺󖑲􉮨􏸅󌡈
    nlp_test.go:16: 󪴣򌩝񣸪񔳵򩏫
    nlp_test.go:16: 񭑯񳇘񫭈򍇎󹌤뤪󲕌􏯩􈨲𤑖񊳺󂖚񏀅
    nlp_test.go:16: 򌾠󘎬񇷎󼋋򲔣񹧰Ꝭ󢟣鿀񾓇𫹴򪏪񷴂򲙺򨲦󇕒𛎥󺵋󭀇􇯻𶨇񵻵񍯂𔓟𯯞𞊓󞦯㾊򈘛򾰠򅵔󟁈󀯝󑟩󾁭񬻨릠򶃍󰼻󂖊񒽪𝷦󗬎񴓏􏥁􀹱𙒼𶭩
    nlp_test.go:16: 񛓩򑘬񵻪򔼑񮌦񯂊𳪋򨜩󅸘󨺢󷾖񐙇򤢆𛸉𻦝𘦌򑜤󒔣󁟳񱊆􊥩񿢽򲥖ꍕ鿭𐲽񯅿𡈰𫙓􆀺򱤗𵢾񺓟򪏻󚂍𴎆򚭆򀭟𳞫
    nlp_test.go:16: 򷦳򮄳񗳻򽜑𛌍򢆝񽪀񻈔򡇝𒚔
    nlp_test.go:16: 𿬊𲱡녌񥩿𺠆򏇏𴱦򔖢􋩹�󍛥󥈂򱯲쫠𒄘乡򂪢󭴲򁂈𺏳𢿯񷇛𙗕󙱛󘗾󺹝󌽲񦬍򌘢󉶙
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.006s
nlp on  gcil2021 [✘!?] via go v1.15.8 
$     nlp_test.go:16: 


nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go run /tmp/r.go                                                                                          1 ↵
# command-line-arguments
/tmp/r.go:9:23: too many arguments in call to rand.Intn
	have (number, number)
	want (int)

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go run /tmp/r.go                                                                                          2 ↵
1

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go run /tmp/r.go
1

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go run /tmp/r.go1

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go run /tmp/r.go
1

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go run /tmp/r.go
1

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ back-in 10m
☕ - Back at 11:33 █████████████████████████████████████████████████████████████████████████████████████████████

nlp on  gcil2021 [✘!?] via go v1.15.8 took 10m4s 
$ golangci-lint run .
nlp_test.go:52:2: unreachable: unreachable code (govet)
	return nil
	^

nlp on  gcil2021 [✘!?] via go v1.15.8 took 8s 
$ golangci-lint run .                                                                                       1 ↵
nlp on  gcil2021 [✘!?] via go v1.15.8 took 2s 
$ make test
golangci-lint run .
go test -v
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.006s
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls
doc.go  example_test.go  go.mod  go.sum  LICENSE.txt  Makefile  nlp.go  nlp_test.go  README.md  testdata

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ tree
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── Makefile
├── nlp.go
├── nlp_test.go
├── README.md
└── testdata
    └── tokenizer_cases.json

1 directory, 10 files

nlp on  gcil2021 [✘!?] via go v1.15.8 
$mkdir stemmer

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ cp ../data/stemmer.go stemmer 

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ tree
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── Makefile
├── nlp.go
├── nlp_test.go
├── README.md
├── stemmer
│   └── stemmer.go
└── testdata
    └── tokenizer_cases.json

2 directories, 11 files
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ make est                                                                                                130 ↵
make: *** No rule to make target 'est'.  Stop.

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ make test                                                                                                 2 ↵
golangci-lint run .
go test -v
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
    nlp_test.go:76: 
        	Error Trace:	nlp_test.go:76
        	Error:      	Not equal: 
        	            	expected: []string{"what", "s", "on", "second"}
        	            	actual  : []string{"what", "on", "second"}
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,4 +1,3 @@
        	            	-([]string) (len=4) {
        	            	+([]string) (len=3) {
        	            	  (string) (len=4) "what",
        	            	- (string) (len=1) "s",
        	            	  (string) (len=2) "on",
        	Test:       	TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- FAIL: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- FAIL: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- FAIL: ExampleTokenize (0.00s)
got:
[hi how are you feel today]
want:
[hi how are you feeling today]
FAIL
After main
exit status 1
FAIL	github.com/353solutions/nlp	0.005s
make: *** [Makefile:3: test] Error 1
nlp on  gcil2021 [✘!?] via go v1.15.8 
❮ make test                                                                                                 2 ↵
golangci-lint run .
go test -v
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- FAIL: ExampleTokenize (0.00s)
got:
[hi how are you feel today]
want:
[hi how are you feeling today]
FAIL
After main
exit status 1
FAIL	github.com/353solutions/nlp	0.004s
make: *** [Makefile:3: test] Error 1
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ make test                                                                                                 2 ↵
golangci-lint run .
go test -v
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.006s
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls
doc.go           go.mod  LICENSE.txt  nlp.go       README.md  testdata
example_test.go  go.sum  Makefile     nlp_test.go  stemmer

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ cat ../quotes/hickey.txt 

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ tree                                                                                                    130 ↵
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── Makefile
├── nlp.go
├── nlp_test.go
├── README.md
├── stemmer
│   └── stemmer.go
└── testdata
    └── tokenizer_cases.json

2 directories, 11 files
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ tree
.
├── doc.go
├── example_test.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── Makefile
├── nlp.go
├── nlp_test.go
├── README.md
├── stemmer
│   ├── stemmer.go
│   └── stemmer_test.go
└── testdata
    └── tokenizer_cases.json

2 directories, 12 files

nlp on  gcil2021 [✘!?] via go v1.15.8 
$make test
golangci-lint run .
go test -v
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.007s

nlp on  gcil2021 [✘!?] via go v1.15.8 
$make test
golangci-lint run .
go test -v ./...
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.003s
=== RUN   TestStemmer
--- PASS: TestStemmer (0.00s)
PASS
ok  	github.com/353solutions/nlp/stemmer	0.010s
nlp on  gcil2021 [✘!?] via go v1.15.8 
❮ make test

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test --json -v ./...                                                                                 130 ↵
{"Time":"2021-02-11T11:51:31.536635772+02:00","Action":"run","Package":"github.com/353solutions/nlp/stemmer","Test":"TestStemmer"}
{"Time":"2021-02-11T11:51:31.536787107+02:00","Action":"output","Package":"github.com/353solutions/nlp/stemmer","Test":"TestStemmer","Output":"=== RUN   TestStemmer\n"}
{"Time":"2021-02-11T11:51:31.536806695+02:00","Action":"output","Package":"github.com/353solutions/nlp/stemmer","Test":"TestStemmer","Output":"--- PASS: TestStemmer (0.00s)\n"}
{"Time":"2021-02-11T11:51:31.53681544+02:00","Action":"pass","Package":"github.com/353solutions/nlp/stemmer","Test":"TestStemmer","Elapsed":0}
{"Time":"2021-02-11T11:51:31.536824487+02:00","Action":"output","Package":"github.com/353solutions/nlp/stemmer","Output":"PASS\n"}
{"Time":"2021-02-11T11:51:31.537405002+02:00","Action":"output","Package":"github.com/353solutions/nlp/stemmer","Output":"ok  \tgithub.com/353solutions/nlp/stemmer\t0.002s\n"}
{"Time":"2021-02-11T11:51:31.537831457+02:00","Action":"pass","Package":"github.com/353solutions/nlp/stemmer","Elapsed":0.003}
{"Time":"2021-02-11T11:51:31.704643695+02:00","Action":"output","Package":"github.com/353solutions/nlp","Output":"Before main\n"}
{"Time":"2021-02-11T11:51:31.704687199+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenizeFuzz"}
{"Time":"2021-02-11T11:51:31.704696067+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenizeFuzz","Output":"=== RUN   TestTokenizeFuzz\n"}
{"Time":"2021-02-11T11:51:31.705281474+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenizeFuzz","Output":"--- PASS: TestTokenizeFuzz (0.00s)\n"}
{"Time":"2021-02-11T11:51:31.705296857+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenizeFuzz","Elapsed":0}
{"Time":"2021-02-11T11:51:31.705304191+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize"}
{"Time":"2021-02-11T11:51:31.705308484+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize","Output":"=== RUN   TestTokenize\n"}
{"Time":"2021-02-11T11:51:31.705418163+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize/hi"}
{"Time":"2021-02-11T11:51:31.705448536+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/hi","Output":"=== RUN   TestTokenize/hi\n"}
{"Time":"2021-02-11T11:51:31.705458043+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize/HI"}
{"Time":"2021-02-11T11:51:31.705464504+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/HI","Output":"=== RUN   TestTokenize/HI\n"}
{"Time":"2021-02-11T11:51:31.705489626+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize/What's_on_second?"}
{"Time":"2021-02-11T11:51:31.705496715+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/What's_on_second?","Output":"=== RUN   TestTokenize/What's_on_second?\n"}
{"Time":"2021-02-11T11:51:31.70552155+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize/\u003cempty\u003e"}
{"Time":"2021-02-11T11:51:31.705529365+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/\u003cempty\u003e","Output":"=== RUN   TestTokenize/\u003cempty\u003e\n"}
{"Time":"2021-02-11T11:51:31.705551374+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize","Output":"--- PASS: TestTokenize (0.00s)\n"}
{"Time":"2021-02-11T11:51:31.705558356+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/hi","Output":"    --- PASS: TestTokenize/hi (0.00s)\n"}
{"Time":"2021-02-11T11:51:31.705563158+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize/hi","Elapsed":0}
{"Time":"2021-02-11T11:51:31.705567247+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/HI","Output":"    --- PASS: TestTokenize/HI (0.00s)\n"}
{"Time":"2021-02-11T11:51:31.70557337+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize/HI","Elapsed":0}
{"Time":"2021-02-11T11:51:31.705579123+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/What's_on_second?","Output":"    --- PASS: TestTokenize/What's_on_second? (0.00s)\n"}
{"Time":"2021-02-11T11:51:31.705584637+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize/What's_on_second?","Elapsed":0}
{"Time":"2021-02-11T11:51:31.705589045+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/\u003cempty\u003e","Output":"    --- PASS: TestTokenize/\u003cempty\u003e (0.00s)\n"}
{"Time":"2021-02-11T11:51:31.705596425+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize/\u003cempty\u003e","Elapsed":0}
{"Time":"2021-02-11T11:51:31.705600461+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize","Elapsed":0}
{"Time":"2021-02-11T11:51:31.705605788+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"ExampleTokenize"}
{"Time":"2021-02-11T11:51:31.705609629+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"ExampleTokenize","Output":"=== RUN   ExampleTokenize\n"}
{"Time":"2021-02-11T11:51:31.705630179+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"ExampleTokenize","Output":"--- PASS: ExampleTokenize (0.00s)\n"}
{"Time":"2021-02-11T11:51:31.705640192+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"ExampleTokenize","Elapsed":0}
{"Time":"2021-02-11T11:51:31.705648673+02:00","Action":"output","Package":"github.com/353solutions/nlp","Output":"PASS\n"}
{"Time":"2021-02-11T11:51:31.705657639+02:00","Action":"output","Package":"github.com/353solutions/nlp","Output":"After main\n"}
{"Time":"2021-02-11T11:51:31.706394022+02:00","Action":"output","Package":"github.com/353solutions/nlp","Output":"ok  \tgithub.com/353solutions/nlp\t0.005s\n"}
{"Time":"2021-02-11T11:51:31.706915302+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Elapsed":0.006}
nlp on  gcil2021 [✘!?] via go v1.15.8 
❮ go test --json ./...   
{"Time":"2021-02-11T11:52:03.942618305+02:00","Action":"run","Package":"github.com/353solutions/nlp/stemmer","Test":"TestStemmer"}
{"Time":"2021-02-11T11:52:03.942768859+02:00","Action":"output","Package":"github.com/353solutions/nlp/stemmer","Test":"TestStemmer","Output":"=== RUN   TestStemmer\n"}
{"Time":"2021-02-11T11:52:03.942789718+02:00","Action":"output","Package":"github.com/353solutions/nlp/stemmer","Test":"TestStemmer","Output":"--- PASS: TestStemmer (0.00s)\n"}
{"Time":"2021-02-11T11:52:03.942798812+02:00","Action":"pass","Package":"github.com/353solutions/nlp/stemmer","Test":"TestStemmer","Elapsed":0}
{"Time":"2021-02-11T11:52:03.942808177+02:00","Action":"output","Package":"github.com/353solutions/nlp/stemmer","Output":"PASS\n"}
{"Time":"2021-02-11T11:52:03.94434546+02:00","Action":"output","Package":"github.com/353solutions/nlp/stemmer","Output":"ok  \tgithub.com/353solutions/nlp/stemmer\t0.005s\n"}
{"Time":"2021-02-11T11:52:03.944781284+02:00","Action":"pass","Package":"github.com/353solutions/nlp/stemmer","Elapsed":0.006}
{"Time":"2021-02-11T11:52:04.100444398+02:00","Action":"output","Package":"github.com/353solutions/nlp","Output":"Before main\n"}
{"Time":"2021-02-11T11:52:04.100547573+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenizeFuzz"}
{"Time":"2021-02-11T11:52:04.100562554+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenizeFuzz","Output":"=== RUN   TestTokenizeFuzz\n"}
{"Time":"2021-02-11T11:52:04.101287661+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenizeFuzz","Output":"--- PASS: TestTokenizeFuzz (0.00s)\n"}
{"Time":"2021-02-11T11:52:04.10131255+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenizeFuzz","Elapsed":0}
{"Time":"2021-02-11T11:52:04.101326595+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize"}
{"Time":"2021-02-11T11:52:04.1013343+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize","Output":"=== RUN   TestTokenize\n"}
{"Time":"2021-02-11T11:52:04.101462049+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize/hi"}
{"Time":"2021-02-11T11:52:04.101472302+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/hi","Output":"=== RUN   TestTokenize/hi\n"}
{"Time":"2021-02-11T11:52:04.101813578+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize/HI"}
{"Time":"2021-02-11T11:52:04.101828145+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/HI","Output":"=== RUN   TestTokenize/HI\n"}
{"Time":"2021-02-11T11:52:04.101837429+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize/What's_on_second?"}
{"Time":"2021-02-11T11:52:04.101844102+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/What's_on_second?","Output":"=== RUN   TestTokenize/What's_on_second?\n"}
{"Time":"2021-02-11T11:52:04.101855284+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"TestTokenize/\u003cempty\u003e"}
{"Time":"2021-02-11T11:52:04.10186181+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/\u003cempty\u003e","Output":"=== RUN   TestTokenize/\u003cempty\u003e\n"}
{"Time":"2021-02-11T11:52:04.101870832+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize","Output":"--- PASS: TestTokenize (0.00s)\n"}
{"Time":"2021-02-11T11:52:04.101878619+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/hi","Output":"    --- PASS: TestTokenize/hi (0.00s)\n"}
{"Time":"2021-02-11T11:52:04.101885716+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize/hi","Elapsed":0}
{"Time":"2021-02-11T11:52:04.101892995+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/HI","Output":"    --- PASS: TestTokenize/HI (0.00s)\n"}
{"Time":"2021-02-11T11:52:04.101899582+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize/HI","Elapsed":0}
{"Time":"2021-02-11T11:52:04.101905918+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/What's_on_second?","Output":"    --- PASS: TestTokenize/What's_on_second? (0.00s)\n"}
{"Time":"2021-02-11T11:52:04.101913807+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize/What's_on_second?","Elapsed":0}
{"Time":"2021-02-11T11:52:04.101920168+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"TestTokenize/\u003cempty\u003e","Output":"    --- PASS: TestTokenize/\u003cempty\u003e (0.00s)\n"}
{"Time":"2021-02-11T11:52:04.10192755+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize/\u003cempty\u003e","Elapsed":0}
{"Time":"2021-02-11T11:52:04.101933902+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"TestTokenize","Elapsed":0}
{"Time":"2021-02-11T11:52:04.101939812+02:00","Action":"run","Package":"github.com/353solutions/nlp","Test":"ExampleTokenize"}
{"Time":"2021-02-11T11:52:04.101945594+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"ExampleTokenize","Output":"=== RUN   ExampleTokenize\n"}
{"Time":"2021-02-11T11:52:04.101952991+02:00","Action":"output","Package":"github.com/353solutions/nlp","Test":"ExampleTokenize","Output":"--- PASS: ExampleTokenize (0.00s)\n"}
{"Time":"2021-02-11T11:52:04.10196153+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Test":"ExampleTokenize","Elapsed":0}
{"Time":"2021-02-11T11:52:04.101968194+02:00","Action":"output","Package":"github.com/353solutions/nlp","Output":"PASS\n"}
{"Time":"2021-02-11T11:52:04.101974642+02:00","Action":"output","Package":"github.com/353solutions/nlp","Output":"After main\n"}
{"Time":"2021-02-11T11:52:04.102961289+02:00","Action":"output","Package":"github.com/353solutions/nlp","Output":"ok  \tgithub.com/353solutions/nlp\t0.006s\n"}
{"Time":"2021-02-11T11:52:04.103381125+02:00","Action":"pass","Package":"github.com/353solutions/nlp","Elapsed":0.006}
nlp on  gcil2021 [✘!?] via go v1.15.8 
❮ go test ./...     
ok  	github.com/353solutions/nlp	0.004s
ok  	github.com/353solutions/nlp/stemmer	0.006s

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test ./...
ok  	github.com/353solutions/nlp	(cached)
--- FAIL: TestStemmer (0.00s)
    stemmer_test.go:8: oops
FAIL
FAIL	github.com/353solutions/nlp/stemmer	0.002s
FAIL

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go ..                                                                                                     1 ↵

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ cp ../data/gen_stop.go .                                                                                130 ↵

nlp on  gcil2021 [✘!?] via go v1.15.8 
$go run gen_stop.go < stemmer/

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ cp ../data/stop_words.txt .                                                                             130 ↵

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go run gen_stop.go < stop_words.txt > stop_words.go

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go build      

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go generate 

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go generate
hi

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go build   

nlp on  gcil2021 [✘!?] via go v1.15.8 
$go generate
hi

nlp on  gcil2021 [✘!?] via go v1.15.8 
❮ go generate

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ tree 
.
├── doc.go
├── example_test.go
├── gen_stop.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── Makefile
├── nlp.go
├── nlp_test.go
├── README.md
├── stemmer
│   ├── stemmer.go
│   └── stemmer_test.go
├── stop_words.go
├── stop_words.txt
└── testdata
    └── tokenizer_cases.json

2 directories, 15 files
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ make stop_words.go 
make: 'stop_words.go' is up to date.

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ touch stop_words.txt 

nlp on  gcil2021 [✘!?] via go v1.15.8 
❮ make stop_words.go  
go generate

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ make
make: 'stop_words.go' is up to date.

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ make
Makefile:2: *** please pick a target.  Stop.

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go test --tags ci                                                                                         2 ↵Before main
--- FAIL: TestTokenize (0.00s)
    --- FAIL: TestTokenize/What's_on_second? (0.00s)
        nlp_test.go:76: 
            	Error Trace:	nlp_test.go:76
            	Error:      	Not equal: 
            	            	expected: []string{"what", "on", "second"}
            	            	actual  : []string{"second"}
            	            	
            	            	Diff:
            	            	--- Expected
            	            	+++ Actual
            	            	@@ -1,4 +1,2 @@
            	            	-([]string) (len=3) {
            	            	- (string) (len=4) "what",
            	            	- (string) (len=2) "on",
            	            	+([]string) (len=1) {
            	            	  (string) (len=6) "second"
            	Test:       	TestTokenize/What's_on_second?
--- FAIL: ExampleTokenize (0.00s)
got:
[hi feel today]
want:
[hi how are you feel today]
FAIL
After main
exit status 1
FAIL	github.com/353solutions/nlp	0.004s
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ make test                                                                                                 1 ↵
golangci-lint run .
go test -v ./...
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- FAIL: ExampleTokenize (0.00s)
got:
[hi feel today]
want:
[hi how are you feel today]
FAIL
After main
FAIL	github.com/353solutions/nlp	0.003s
=== RUN   TestStemmer
--- PASS: TestStemmer (0.00s)
PASS
ok  	github.com/353solutions/nlp/stemmer	(cached)
FAIL
make: *** [Makefile:9: test] Error 1
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ make test                                                                                                 2 ↵
golangci-lint run .
go test -v ./...
Before main
=== RUN   TestTokenizeFuzz
--- PASS: TestTokenizeFuzz (0.00s)
=== RUN   TestTokenize
=== RUN   TestTokenize/hi
=== RUN   TestTokenize/HI
=== RUN   TestTokenize/What's_on_second?
=== RUN   TestTokenize/<empty>
--- PASS: TestTokenize (0.00s)
    --- PASS: TestTokenize/hi (0.00s)
    --- PASS: TestTokenize/HI (0.00s)
    --- PASS: TestTokenize/What's_on_second? (0.00s)
    --- PASS: TestTokenize/<empty> (0.00s)
=== RUN   ExampleTokenize
--- PASS: ExampleTokenize (0.00s)
PASS
After main
ok  	github.com/353solutions/nlp	0.003s
=== RUN   TestStemmer
--- PASS: TestStemmer (0.00s)
PASS
ok  	github.com/353solutions/nlp/stemmer	(cached)
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ :w
zsh: command not found: :w

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls                                                                                                      127 ↵
doc.go           gen_stop.go  go.sum       Makefile  nlp_test.go  stemmer        stop_words.txt
example_test.go  go.mod       LICENSE.txt  nlp.go    README.md    stop_words.go  testdata

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ tree
.
├── doc.go
├── example_test.go
├── gen_stop.go
├── go.mod
├── go.sum
├── LICENSE.txt
├── Makefile
├── nlp.go
├── nlp_test.go
├── README.md
├── stemmer
│   ├── stemmer.go
│   └── stemmer_test.go
├── stop_words.go
├── stop_words.txt
└── testdata
    └── tokenizer_cases.json

2 directories, 15 files
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ mkdir cmd/nlpd
mkdir: cannot create directory ‘cmd/nlpd’: No such file or directory

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ mkdir -p cmd/nlpd                                                                                         1 ↵

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ cp ../data/nlpd.go cmd/nlpd 

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go build ./..
no Go files in /home/miki/Teaching/the-daily-go

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls                                                                                                        1 ↵
cmd     example_test.go  go.mod  LICENSE.txt  nlp.go       README.md  stop_words.go   testdata
doc.go  gen_stop.go      go.sum  Makefile     nlp_test.go  stemmer    stop_words.txt

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go build ./...
nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls
cmd     example_test.go  go.mod  LICENSE.txt  nlp.go       README.md  stop_words.go   testdata
doc.go  gen_stop.go      go.sum  Makefile     nlp_test.go  stemmer    stop_words.txt

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls cmd/nlpd 
nlpd.go

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls cmd/
nlpd

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go build ./cmd/nlpd 

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls
cmd     example_test.go  go.mod  LICENSE.txt  nlpd    nlp_test.go  stemmer        stop_words.txt
doc.go  gen_stop.go      go.sum  Makefile     nlp.go  README.md    stop_words.go  testdata

nlp on  gcil2021 [✘!?] via go v1.15.8 
$go run ./cmd/nlpd 
^Csignal: interrupt

nlp on  gcil2021 [✘!?] via go v1.15.8 took 8s 
$ rm nlpd                                                                                                   1 ↵

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go run ./cmd/nlpd 
^Csignal: interrupt

nlp on  gcil2021 [✘!?] via go v1.15.8 took 4m7s 
❮ go run ./cmd/nlpd                                                                                         1 ↵
2021/02/11 12:29:01 server ready on :8080
^Csignal: interrupt

nlp on  gcil2021 [✘!?] via go v1.15.8 took 40s 
$ cat go                                                                                                    1 ↵

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ go mov vendor                                                                                           130 ↵
go mov: unknown command
Run 'go help' for usage.
nlp on  gcil2021 [✘!?] via go v1.15.8 
❮ go mod vendor                                                                                             2 ↵

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ ls
cmd     example_test.go  go.mod  LICENSE.txt  nlp.go       README.md  stop_words.go   testdata
doc.go  gen_stop.go      go.sum  Makefile     nlp_test.go  stemmer    stop_words.txt  vendor

nlp on  gcil2021 [✘!?] via go v1.15.8 
$ cat ../quotes/grove.txt   
Only the paranoid survive.
    - Andy Grove

nlp on  gcil2021 [✘!?] via go v1.15.8 
$