// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nlp.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenizeRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenizeRequest) Reset()         { *m = TokenizeRequest{} }
func (m *TokenizeRequest) String() string { return proto.CompactTextString(m) }
func (*TokenizeRequest) ProtoMessage()    {}
func (*TokenizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nlp_0345f48932d32ecd, []int{0}
}
func (m *TokenizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenizeRequest.Unmarshal(m, b)
}
func (m *TokenizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenizeRequest.Marshal(b, m, deterministic)
}
func (dst *TokenizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenizeRequest.Merge(dst, src)
}
func (m *TokenizeRequest) XXX_Size() int {
	return xxx_messageInfo_TokenizeRequest.Size(m)
}
func (m *TokenizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenizeRequest proto.InternalMessageInfo

func (m *TokenizeRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type TokenizeResponse struct {
	Tokens               []string `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenizeResponse) Reset()         { *m = TokenizeResponse{} }
func (m *TokenizeResponse) String() string { return proto.CompactTextString(m) }
func (*TokenizeResponse) ProtoMessage()    {}
func (*TokenizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nlp_0345f48932d32ecd, []int{1}
}
func (m *TokenizeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenizeResponse.Unmarshal(m, b)
}
func (m *TokenizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenizeResponse.Marshal(b, m, deterministic)
}
func (dst *TokenizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenizeResponse.Merge(dst, src)
}
func (m *TokenizeResponse) XXX_Size() int {
	return xxx_messageInfo_TokenizeResponse.Size(m)
}
func (m *TokenizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenizeResponse proto.InternalMessageInfo

func (m *TokenizeResponse) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type PingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nlp_0345f48932d32ecd, []int{2}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (dst *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(dst, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

type PingResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nlp_0345f48932d32ecd, []int{3}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (dst *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(dst, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TokenizeRequest)(nil), "pb.TokenizeRequest")
	proto.RegisterType((*TokenizeResponse)(nil), "pb.TokenizeResponse")
	proto.RegisterType((*PingRequest)(nil), "pb.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "pb.PingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NLPClient is the client API for NLP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NLPClient interface {
	Tokenize(ctx context.Context, in *TokenizeRequest, opts ...grpc.CallOption) (*TokenizeResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type nLPClient struct {
	cc *grpc.ClientConn
}

func NewNLPClient(cc *grpc.ClientConn) NLPClient {
	return &nLPClient{cc}
}

func (c *nLPClient) Tokenize(ctx context.Context, in *TokenizeRequest, opts ...grpc.CallOption) (*TokenizeResponse, error) {
	out := new(TokenizeResponse)
	err := c.cc.Invoke(ctx, "/pb.NLP/Tokenize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nLPClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/pb.NLP/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NLPServer is the server API for NLP service.
type NLPServer interface {
	Tokenize(context.Context, *TokenizeRequest) (*TokenizeResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterNLPServer(s *grpc.Server, srv NLPServer) {
	s.RegisterService(&_NLP_serviceDesc, srv)
}

func _NLP_Tokenize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPServer).Tokenize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NLP/Tokenize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPServer).Tokenize(ctx, req.(*TokenizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NLP_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NLPServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NLP/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NLPServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NLP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NLP",
	HandlerType: (*NLPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tokenize",
			Handler:    _NLP_Tokenize_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _NLP_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nlp.proto",
}

func init() { proto.RegisterFile("nlp.proto", fileDescriptor_nlp_0345f48932d32ecd) }

var fileDescriptor_nlp_0345f48932d32ecd = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xcb, 0x29, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe5, 0xe2, 0x0f, 0xc9, 0xcf,
	0x4e, 0xcd, 0xcb, 0xac, 0x4a, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62,
	0x29, 0x49, 0xad, 0x28, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xb4, 0xb8,
	0x04, 0x10, 0xca, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xc4, 0xb8, 0xd8, 0x4a, 0x40, 0x62,
	0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x12, 0x2f, 0x17, 0x77, 0x40, 0x66,
	0x5e, 0x3a, 0xd4, 0x38, 0x25, 0x3e, 0x2e, 0x1e, 0x08, 0x17, 0xa2, 0xcd, 0x28, 0x9b, 0x8b, 0xd9,
	0xcf, 0x27, 0x40, 0xc8, 0x9c, 0x8b, 0x03, 0x66, 0xa2, 0x90, 0xb0, 0x5e, 0x41, 0x92, 0x1e, 0x9a,
	0x33, 0xa4, 0x44, 0x50, 0x05, 0x21, 0xba, 0x95, 0x18, 0x84, 0xb4, 0xb9, 0x58, 0x40, 0xe6, 0x09,
	0xf1, 0x83, 0xe4, 0x91, 0x2c, 0x92, 0x12, 0x40, 0x08, 0xc0, 0x14, 0x27, 0xb1, 0x81, 0x7d, 0x6a,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xea, 0x31, 0x4a, 0xf6, 0x00, 0x00, 0x00,
}
